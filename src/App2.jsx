// src/App.jsx

import React, { useState, useEffect, useRef } from 'react';
import { ethers } from 'ethers';
import { getFirestore, doc, onSnapshot } from "firebase/firestore";
import { initializeApp } from "firebase/app";

// Import the single configuration file generated by the deployment script
import contractConfig from './config.js';

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyC5mwqBjmr1Rr7khr51FQ5CsF9QmnUhxmc",
  authDomain: "taraxa-pulse-protocol.firebaseapp.com",
  projectId: "taraxa-pulse-protocol",
  storageBucket: "taraxa-pulse-protocol.firebasestorage.app",
  messagingSenderId: "152882379081",
  appId: "1:152882379081:web:ebc203f4fb5b7392fd4298"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// --- Estilos globales ---
const globalStyles = `
  body {
    background: #181818;
    color: #f8f8f2;
    font-family: 'JetBrains Mono', monospace;
    margin: 0;
  }
  * {
    box-sizing: border-box;
    font-family: 'JetBrains Mono', monospace;
  }
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  @keyframes pulseGlow {
    0% { text-shadow: 0 0 5px rgba(80, 250, 123, 0.5); }
    50% { text-shadow: 0 0 15px rgba(80, 250, 123, 1); }
    100% { text-shadow: 0 0 5px rgba(80, 250, 123, 0.5); }
  }
  @keyframes pulseDot {
    0% { opacity: 0.4; transform: scale(0.9); }
    50% { opacity: 1; transform: scale(1.2); }
    100% { opacity: 0.4; transform: scale(0.9); }
  }
`;

const consoleTheme = {
  text: '#ffffff',
  accent: '#50fa7b',
  error: '#ff6e6e',
  highlight: '#89dceb',
};

// --- Header ---
const Header = () => (
  <header style={{ textAlign: 'center', padding: '3rem 1rem 2rem 1rem' }}>
    <h1 style={{
      fontSize: '3rem',
      fontWeight: 600,
      color: '#ffffff',
      margin: '0',
      fontStyle: 'italic',
      display: 'inline-flex',
      alignItems: 'center',
      gap: '0.5rem'
    }}>
      Taraxa Pulse
      <span style={{
        width: '12px',
        height: '12px',
        borderRadius: '50%',
        backgroundColor: '#50fa7b',
        display: 'inline-block',
        animation: 'pulseDot 1.5s infinite',
      }}></span>
    </h1>
    <p style={{
      fontSize: '1.2rem',
      color: '#aaaaaa',
      marginTop: '0.5rem',
      fontStyle: 'italic'
    }}>
      Bonding the universe on chain!
    </p>
  </header>
);

// --- Navbar ---
const Navbar = () => (
  <nav style={{
    padding: '1rem 0',
    display: 'flex',
    justifyContent: 'center',
    marginBottom: '2rem',
  }}>
    <ul style={{ display: 'flex', gap: '2rem', listStyle: 'none', margin: 0, padding: 0 }}>
      {['My NFTs', 'Marketplace', 'See All', 'Taraxa Pulse'].map((link) => (
        <li key={link}>
          <a href="#" style={{ color: '#ffffff', textDecoration: 'none', fontSize: '1rem' }}>
            {link}
          </a>
        </li>
      ))}
    </ul>
  </nav>
);

// --- Consola estilo flat ---
const ThePulsePrompt = ({ status }) => {
  let color = consoleTheme.accent;
  if (status === 'minting') color = consoleTheme.highlight;
  if (status === 'error') color = consoleTheme.error;

  return (
    <span style={{
      color,
      marginRight: '5px',
      animation: status === 'minting' ? 'pulseGlow 1.5s infinite' : 'none',
    }}>
      the_pulse~$
    </span>
  );
};

const LiveMonitor = () => {
  const [triggerState, setTriggerState] = useState(null);
  const [latestBlock, setLatestBlock] = useState(null);
  const [countdown, setCountdown] = useState("Connecting to protocol...");

  const PHASE_1_TOTAL_NFTS = 90;
  const PHASE_1_CONSTANT_A = 0.003183;
  const PHASE_1_EXPONENT_ALPHA = 2.3;

  useEffect(() => {
    const localProvider = new ethers.JsonRpcProvider("http://127.0.0.1:8545");

    const unsub = onSnapshot(doc(db, "system_state", "trigger_state"), (docSnap) => {
      if (docSnap.exists()) setTriggerState(docSnap.data());
    });

    const blockInterval = setInterval(async () => {
      try {
        const blockNumber = await localProvider.getBlockNumber();
        setLatestBlock(blockNumber);
      } catch { }
    }, 5000);

    return () => {
      unsub();
      clearInterval(blockInterval);
    };
  }, []);

  useEffect(() => {
    if (!triggerState) {
      setCountdown("Awaiting system state...");
      return;
    }

    const countdownInterval = setInterval(() => {
      const nextNftId = triggerState.next_nft_id;

      if (nextNftId <= PHASE_1_TOTAL_NFTS) {
        const intervalHours = PHASE_1_CONSTANT_A * Math.pow(nextNftId, PHASE_1_EXPONENT_ALPHA);
        const intervalMillis = intervalHours * 3600 * 1000;
        const lastMintTime = triggerState.last_mint_timestamp.toMillis();
        const targetTime = lastMintTime + intervalMillis;
        const now = Date.now();
        const millisRemaining = targetTime - now;

        if (millisRemaining <= 0) {
          setCountdown("MINTING IN PROGRESS...");
        } else {
          const hours = Math.floor(millisRemaining / 3600000);
          const minutes = Math.floor((millisRemaining % 3600000) / 60000);
          const seconds = Math.floor((millisRemaining % 60000) / 1000);
          setCountdown(`Time remaining: ${hours}h ${minutes}m ${seconds}s`);
        }
      } else {
        if (latestBlock === null) {
          setCountdown("Syncing with blockchain...");
          return;
        }
        const blocksProcessed = latestBlock - triggerState.last_mint_block;
        const blocksRemaining = 4560 - blocksProcessed;

        if (blocksRemaining <= 0) {
          setCountdown("MINTING IN PROGRESS...");
        } else {
          setCountdown(`${blocksRemaining} blocks remaining for next Pulse...`);
        }
      }
    }, 1000);

    return () => clearInterval(countdownInterval);
  }, [triggerState, latestBlock]);

  const monitorStatus = countdown.includes("MINTING") ? 'minting' : 'idle';

  return (
    <div style={{
      padding: '1rem 0',
      fontSize: '1rem',
      textAlign: 'left',
      width: '100%',
      backgroundColor: 'transparent',
      marginBottom: '2rem'
    }}>
      <ThePulsePrompt status={monitorStatus} /> <span>STATUS: MONITORING TARAXA...</span>
      <br />
      <ThePulsePrompt status={monitorStatus} /> <span>LATEST BLOCK: <span style={{ color: consoleTheme.highlight }}>{latestBlock || '...'}</span></span>
      <br />
      {triggerState && (
        <>
          <ThePulsePrompt status={monitorStatus} /> <span>NEXT NFT ID: <span style={{ color: consoleTheme.error }}>#{triggerState.next_nft_id || '...'}</span></span>
          <br />
        </>
      )}
      <br />
      <ThePulsePrompt status={monitorStatus} /> <span style={{ color: consoleTheme.accent }}>
        [NEXT MINT]: {countdown}
      </span>
    </div>
  );
};

// --- Footer ---
const Footer = () => (
  <footer style={{ marginTop: '4rem', paddingTop: '1.5rem', textAlign: 'center', color: '#777' }}>
    <div style={{ display: 'flex', justifyContent: 'center', gap: '2rem' }}>
      {['Telegram', 'Twitter', 'Taraxa.io', 'Fomo.biz'].map((link) => (
        <a key={link} href="#" style={{ color: '#777', textDecoration: 'none' }}>{link}</a>
      ))}
    </div>
  </footer>
);

// --- App Principal ---
export default function App() {
  // (dejamos la l√≥gica original de NFTs, compra, modal, etc. igual)
  // ...
}
